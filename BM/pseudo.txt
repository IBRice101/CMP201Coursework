function fullSuffixMatch(shiftArray, borderArray, needle)

Input − Array to store shift locations, the border array and the needle to search.

Output − Fill the shift array and the border array.

Begin
   n := needle length
   i := n
   j := n+1
   borderArray[i] := j

   while i > 0, do
      while j <= n AND needle[i-1] ≠ needle[j-1], do
         if shiftArray[j] = 0, then
            shiftArray[j] := j-i;
         j := borderArray[j];
      done

      decrease i and j by 1
      borderArray[i] := j
   done
End

function partialSuffixMatch(shiftArray, borderArray, needle)

Input− Array to store shift locations, the border array and the needle to search.

Output − Fill the shift array and the border array.

Begin
   n := needle length
   j := borderArray[0]

   for index of all characters ‘i’ of needle, do
      if shiftArray[i] = 0, then
         shiftArray[i] := j
      if i = j then
         j := borderArray[j]
   done
End

searchPattern(haystack, needle)
Input: The main haystack and the needle, that will be searched

Output − The indexes where the needle is found

Begin
   needleLen := needle length
   haystackLen := haystack size

   for all entries of shiftArray, do
      set all entries to 0
   done

   call fullSuffixMatch(shiftArray, borderArray, needle)
   call partialSuffixMatch(shiftArray, borderArray, needle)
   shift := 0

   while shift <= (haystackLen - needleLen), do
      j := needleLen -1
      while j >= 0 and needle[j] = haystack[shift + j], do
         decrease j by 1
      done

      if j < 0, then
         print the shift as, there is a match
         shift := shift + shiftArray[0]
      else
         shift := shift + shiftArray[j+1]
   done
End